import streamlit as st
import pandas as pd
import io
from datetime import datetime

# --- H√ÄM X·ª¨ L√ù LOGIC CH√çNH ---
# ƒê√≥ng g√≥i logic c·ªßa b·∫°n v√†o m·ªôt h√†m ƒë·ªÉ code s·∫°ch s·∫Ω v√† d·ªÖ qu·∫£n l√Ω
def process_tkhq_data(df, ngay_kiem_toan):
    """
    H√†m n√†y nh·∫≠n v√†o DataFrame th√¥ v√† ng√†y ki·ªÉm to√°n,
    th·ª±c hi·ªán t·∫•t c·∫£ c√°c b∆∞·ªõc x·ª≠ l√Ω v√† tr·∫£ v·ªÅ DataFrame k·∫øt qu·∫£.
    """
    # 2. Chuy·ªÉn ƒë·ªãnh d·∫°ng c·ªôt ng√†y th√°ng
    df['DECLARATION_DUE_DATE'] = pd.to_datetime(df['DECLARATION_DUE_DATE'], errors='coerce')
    df['DECLARATION_RECEIVED_DATE'] = pd.to_datetime(df['DECLARATION_RECEIVED_DATE'], errors='coerce')

    # 3. (1) Kh√¥ng nh·∫≠p ng√†y ƒë·∫øn h·∫°n TKHQ
    df['KH√îNG NH·∫¨P NG√ÄY ƒê·∫æN H·∫†N TKHQ'] = df['DECLARATION_DUE_DATE'].isna().map(lambda x: 'X' if x else '')

    # 4. (2) S·ªë ng√†y qu√° h·∫°n TKHQ
    # Ch·ªâ t√≠nh n·∫øu ch∆∞a c√≥ ng√†y nh·∫≠n TKHQ v√† qu√° h·∫°n > 0
    df['S·ªê NG√ÄY QU√Å H·∫†N TKHQ'] = df.apply(
        lambda row: (ngay_kiem_toan - row['DECLARATION_DUE_DATE']).days
        if pd.notnull(row['DECLARATION_DUE_DATE']) and pd.isnull(row['DECLARATION_RECEIVED_DATE']) and (ngay_kiem_toan - row['DECLARATION_DUE_DATE']).days > 0
        else '',
        axis=1
    )

    # 5. (3) Qu√° h·∫°n nh∆∞ng ch∆∞a nh·∫≠p TKHQ
    # Chuy·ªÉn c·ªôt sang d·∫°ng s·ªë ƒë·ªÉ x·ª≠ l√Ω an to√†n
    so_ngay_qua_han_numeric = pd.to_numeric(df['S·ªê NG√ÄY QU√Å H·∫†N TKHQ'], errors='coerce')
    df['QU√Å H·∫†N CH∆ØA NH·∫¨P TKHQ'] = so_ngay_qua_han_numeric.apply(lambda x: 'X' if pd.notnull(x) and x > 0 else '')

    # 6. (4) Qu√° h·∫°n > 90 ng√†y nh∆∞ng ch∆∞a nh·∫≠p TKHQ
    df['QU√Å H·∫†N > 90 NG√ÄY CH∆ØA NH·∫¨P TKHQ'] = so_ngay_qua_han_numeric.apply(lambda x: 'X' if pd.notnull(x) and x > 90 else '')

    # 7. (5) C√≥ ph√°t sinh gia h·∫°n TKHQ
    def check_gia_han(row):
        # Ki·ªÉm tra s·ª± t·ªìn t·∫°i c·ªßa c·ªôt tr∆∞·ªõc khi truy c·∫≠p
        if 'AUDIT_DATE2' in row and pd.notnull(row['AUDIT_DATE2']):
            return 'X'
        if 'DECLARATION_REF_NO' in row and isinstance(row['DECLARATION_REF_NO'], str):
            text = row['DECLARATION_REF_NO'].lower().replace(" ", "")
            if 'giahan' in text:
                return 'X'
        return ''

    df['C√ì PH√ÅT SINH GIA H·∫†N TKHQ'] = df.apply(check_gia_han, axis=1)

    return df

# --- GIAO DI·ªÜN NG∆Ø·ªúI D√ôNG STREAMLIT ---

st.set_page_config(layout="wide")
st.title("·ª®ng d·ª•ng Ph√¢n t√≠ch T·ªù khai H·∫£i quan (TKHQ)")

# --- Thanh b√™n (Sidebar) cho c√°c ph·∫ßn c√†i ƒë·∫∑t v√† t·∫£i file ---
with st.sidebar:
    st.header("C√†i ƒë·∫∑t v√† T·∫£i file")

    # Widget ƒë·ªÉ ng∆∞·ªùi d√πng t·∫£i file l√™n
    uploaded_file = st.file_uploader(
        "Ch·ªçn file Excel c·∫ßn ph√¢n t√≠ch",
        type=['xlsx']
    )

    # Widget ƒë·ªÉ ng∆∞·ªùi d√πng ch·ªçn ng√†y ki·ªÉm to√°n
    audit_date = st.date_input(
        "Ch·ªçn ng√†y ki·ªÉm to√°n",
        # D·ª±a tr√™n ng√†y trong script g·ªëc c·ªßa b·∫°n
        value=datetime(2025, 5, 31)
    )

# --- Khu v·ª±c x·ª≠ l√Ω ch√≠nh ---
if uploaded_file is not None:
    st.info(f"ƒê√£ t·∫£i l√™n file: **{uploaded_file.name}**")
    
    # N√∫t ƒë·ªÉ b·∫Øt ƒë·∫ßu x·ª≠ l√Ω
    if st.button("B·∫Øt ƒë·∫ßu x·ª≠ l√Ω", type="primary"):
        with st.spinner("ƒêang ƒë·ªçc v√† x·ª≠ l√Ω d·ªØ li·ªáu... Vui l√≤ng ch·ªù."):
            try:
                # ƒê·ªçc d·ªØ li·ªáu t·ª´ file ƒë√£ t·∫£i l√™n
                df_raw = pd.read_excel(uploaded_file)
                
                # Chuy·ªÉn ƒë·ªïi ng√†y ki·ªÉm to√°n t·ª´ widget th√†nh d·∫°ng pandas datetime
                ngay_kiem_toan_pd = pd.to_datetime(audit_date)
                
                # G·ªçi h√†m x·ª≠ l√Ω
                df_processed = process_tkhq_data(df_raw, ngay_kiem_toan_pd)
                
                st.success("X·ª≠ l√Ω ho√†n t·∫•t!")
                
                # Hi·ªÉn th·ªã k·∫øt qu·∫£
                st.subheader("K·∫øt qu·∫£ ph√¢n t√≠ch")
                st.dataframe(df_processed)
                
                # --- Ch·ª©c nƒÉng t·∫£i xu·ªëng file Excel ---
                # T·∫°o m·ªôt buffer trong b·ªô nh·ªõ
                output_buffer = io.BytesIO()
                with pd.ExcelWriter(output_buffer, engine='openpyxl') as writer:
                    df_processed.to_excel(writer, index=False, sheet_name='ket_qua_TKHQ')
                
                st.download_button(
                    label="üì• T·∫£i xu·ªëng k·∫øt qu·∫£ Excel",
                    data=output_buffer.getvalue(),
                    file_name=f"ket_qua_TKHQ_{audit_date.strftime('%d%m%Y')}.xlsx",
                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                )

            except Exception as e:
                st.error(f"ƒê√£ c√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh x·ª≠ l√Ω: {e}")

else:
    st.info("Vui l√≤ng t·∫£i l√™n m·ªôt file Excel ƒë·ªÉ b·∫Øt ƒë·∫ßu.")
